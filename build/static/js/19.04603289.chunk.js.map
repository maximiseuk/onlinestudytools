{"version":3,"sources":["components/Signup.js"],"names":["useStyles","makeStyles","theme","password","width","repeatPassword","marginLeft","firstName","lastName","link","color","palette","primary","main","stringify","JSON","initialState","email","username","code","dispatch","useDispatch","useState","welcomeOpen","setWelcomeOpen","disclaimerOpen","setDisclaimerOpen","scores","setScores","classes","values","setValues","helpers","setHelpers","agreed","setAgreed","userSubjects","setUserSubjects","history","useHistory","handleChange","field","e","newState","target","value","length","repeatPasswordError","test","String","toLowerCase","split","map","s","charAt","toUpperCase","substring","join","changeScores","a","useEffect","getCookie","replace","className","style","maxWidth","margin","open","id","multiple","freeSolo","filterSelectedOptions","onChange","val","newScores","forEach","changeSubjects","options","renderTags","getTagProps","option","index","key","variant","label","renderInput","params","fullWidth","i","display","alignItems","marginTop","marginRight","size","labelId","Array","keys","x","onClick","fetch","method","headers","body","newData","subjects","grades","sessionID","then","res","json","data","type","payload","catch","autoFocus","onClose","gutterBottom","onSubmit","preventDefault","console","log","errors","newErrors","d","Date","localStorage","setItem","document","cookie","response","getTime","Object","filter","startCase","placeholder","helperText","error","includes","control","checked","href","marginBottom","disabled","component","Link","to"],"mappings":"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","file":"static/js/19.04603289.chunk.js","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Divider from \"@material-ui/core/Divider\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { startCase } from \"lodash\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport getCookie from \"../api/cookies\";\nimport { Chip } from \"@material-ui/core\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport ButtonLink from \"@material-ui/core/Link\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\n\nconst useStyles = makeStyles(theme => ({\n  password: {\n    width: \"calc(50% - 4px)\"\n  },\n  repeatPassword: {\n    width: \"calc(50% - 4px)\",\n    marginLeft: 8\n  },\n  firstName: {\n    width: \"calc(50% - 4px)\"\n  },\n  lastName: {\n    width: \"calc(50% - 4px)\",\n    marginLeft: 8\n  },\n  link: {\n    color: theme.palette.primary.main\n  }\n}));\n\nexport default () => {\n  const { stringify } = JSON,\n    initialState = {\n      email: \"\",\n      username: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      code: \"\",\n      password: \"\",\n      repeatPassword: \"\"\n    },\n    subjects = [\n      \"Maths\",\n      \"Chemistry\",\n      \"Physics\",\n      \"Biology\",\n      \"Computing\",\n      \"Astronomy\",\n      \"Greek\",\n      \"Latin\",\n      \"English literature\",\n      \"English language\",\n      \"Art\",\n      \"Technology\",\n      \"French\",\n      \"Further maths\",\n      \"German\",\n      \"Spanish\",\n      \"Business\",\n      \"Mandarin\",\n      \"Drama\",\n      \"Economics\",\n      \"Food tech\",\n      \"Politics\",\n      \"History\",\n      \"Geography\",\n      \"Italian\",\n      \"Religious studies\",\n      \"Music\",\n      \"Psychology\",\n      \"Statistics\",\n      \"Sociology\",\n      \"Citizenship\",\n      \"Urdu\",\n      \"Underwater basket weaving\"\n    ],\n    dispatch = useDispatch(),\n    [welcomeOpen, setWelcomeOpen] = useState(false),\n    [disclaimerOpen, setDisclaimerOpen] = useState(false),\n    [scores, setScores] = useState({}),\n    classes = useStyles(),\n    [values, setValues] = useState(initialState),\n    [helpers, setHelpers] = useState(initialState),\n    [agreed, setAgreed] = useState(false),\n    [userSubjects, setUserSubjects] = useState([]),\n    history = useHistory(),\n    login = e => {\n      e.preventDefault();\n      fetch(\"https://maximise.herokuapp.com/users/create\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: stringify({\n          email: values.email,\n          username: values.username,\n          firstName: values.firstName,\n          lastName: values.lastName,\n          password: values.password,\n          code: values.code\n        })\n      })\n        .then(res => res.json())\n        .then(data => {\n          console.log(data);\n          if (JSON.stringify(data.errors) !== \"{}\") {\n            let newErrors = helpers;\n            for (let key in data.errors) {\n              newErrors[key] = data.errors[key];\n            }\n            console.log(newErrors);\n            \n            setHelpers({...helpers, ...newErrors});\n          } else {\n            setWelcomeOpen(true);\n            const d = new Date();\n            localStorage.setItem(\"email\", values.email);\n            localStorage.setItem(\"name\", values.firstName);\n            document.cookie = `email=${\n              data.response.username\n            }; expires ${d.getTime() + 4e12}; path=/`;\n            document.cookie = `sessionID=${\n              data.response.sessionID\n            }; expires ${d.getTime() + 4e12}; path=/`;\n          }\n        })\n        .catch(() => {\n          dispatch({\n            type: \"NEW_ERROR\",\n            payload: \"There was an error signing you up\"\n          });\n        });\n    },\n    finish = () => {\n      fetch(\"https://maximise.herokuapp.com/users/update_data/subjects\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: stringify({\n          newData: {\n            subjects: userSubjects,\n            grades: scores\n          },\n          sessionID: getCookie(\"sessionID\"),\n          username: getCookie(\"email\")\n        })\n      })\n        .then(res => res.json())\n        .then(data => {\n          dispatch({\n            type: \"CHANGE_SUBJECTS\",\n            payload: userSubjects\n          });\n          history.replace(\"/home\");\n        })\n        .catch(() => {\n          dispatch({\n            type: \"NEW_ERROR\",\n            payload: \"There was an error uploading your subjects\"\n          });\n        });\n    },\n    clear = () => {\n      setValues(initialState);\n      setHelpers(initialState);\n    },\n    handleChange = field => e => {\n      let newState = {};\n      if (e.target.value === \"\") {\n        newState = {\n          [field]: \"Field required\"\n        };\n      } else {\n        newState = {\n          [field]: \"\"\n        };\n      }\n      if (field === \"repeatPassword\") {\n        if (e.target.value.length === 0) {\n          newState = {\n            repeatPasswordError: \"\"\n          };\n        } else if (e.target.value !== values.password) {\n          newState = {\n            repeatPassword: \"Passwords must match\"\n          };\n        }\n      } else if (field === \"password\") {\n        if (e.target.value.length < 6) {\n          newState = {\n            password: \"Password must at least 6 characters\"\n          };\n        }\n        if (values.repeatPassword.length === 0) {\n          newState = {\n            ...newState,\n            repeatPassword: \"\"\n          };\n        } else if (values.repeatPassword !== e.target.value) {\n          newState = {\n            ...newState,\n            repeatPassword: \"Passwords must match\"\n          };\n        }\n      } else if (field === \"email\") {\n        var re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n        if (!re.test(String(e.target.value).toLowerCase())) {\n          newState = {\n            email: \"Email address invalid\"\n          };\n        }\n      } else if (field === \"username\") {\n        if (!/^[a-z0-9]+$/i.test(e.target.value)) {\n          newState = {\n            username: \"Username must be alphanumeric\"\n          }\n        }\n      }\n      setValues({\n        ...values,\n        [field]: e.target.value\n      });\n      setHelpers({\n        ...helpers,\n        ...newState\n      });\n      if (field === \"firstName\" || field === \"surname\") {\n        setValues({\n          ...values,\n          [field]: e.target.value\n            .toLowerCase()\n            .split(\" \")\n            .map(s => s.charAt(0).toUpperCase() + s.substring(1))\n            .join(\" \")\n        });\n      }\n    },\n    changeScores = a => e => {\n      setScores({\n        ...scores,\n        [a]: e.target.value\n      });\n    },\n    changeSubjects = val => {\n      let newScores = scores;\n      val.forEach(a => {\n        if (!newScores[a]) {\n          newScores[a] = 5;\n        }\n      });\n      setScores(newScores);\n      setUserSubjects(val);\n    };\n  useEffect(() => {\n    if (getCookie(\"email\") !== \"\") {\n      history.replace(\"/home\");\n    }\n  }, []);\n  return (\n    <Paper className=\"fade padding\" style={{ maxWidth: 600, margin: \"0 auto\" }}>\n      <Dialog open={welcomeOpen}>\n        <DialogTitle>Welcome to Maximise Online Study Tools!</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            To help us make your experience amazing, please enter the subjects\n            you're taking below (press enter to add a new subject). You can\n            always change these in settings if you want. Once you've entered\n            them, enter the grade your currently working at for each one.\n          </DialogContentText>\n          <Autocomplete\n            multiple\n            freeSolo\n            filterSelectedOptions\n            onChange={(e, val) => changeSubjects(val)}\n            options={subjects}\n            renderTags={(value, getTagProps) =>\n              value.map((option, index) => (\n                <Chip\n                  key={index}\n                  variant=\"outlined\"\n                  label={option}\n                  {...getTagProps({ index })}\n                  style={{ margin: 4 }}\n                />\n              ))\n            }\n            renderInput={params => (\n              <TextField\n                {...params}\n                label=\"Enter your subjects\"\n                margin=\"normal\"\n                variant=\"filled\"\n                fullWidth\n              />\n            )}\n          />\n          {userSubjects.map((a, i) => (\n            <div\n              style={{ display: \"flex\", alignItems: \"center\", marginTop: 8 }}\n              key={a}\n            >\n              <Typography style={{ marginRight: 8 }}>{a}</Typography>\n              <FormControl\n                variant=\"filled\"\n                style={{ width: 96, marginLeft: \"auto\" }}\n                size=\"small\"\n              >\n                <InputLabel id=\"demo-simple-select-filled-label\">\n                  Grade\n                </InputLabel>\n                <Select\n                  labelId=\"demo-simple-select-filled-label\"\n                  id=\"demo-simple-select-filled\"\n                  value={scores[a]}\n                  onChange={changeScores(a)}\n                >\n                  {[...Array(9).keys()].map(x => (\n                    <MenuItem value={x + 1} key={x}>\n                      {x + 1}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </div>\n          ))}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={finish} color=\"primary\" autoFocus>\n            Go\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <Dialog open={disclaimerOpen} onClose={() => setDisclaimerOpen(false)}>\n        <DialogTitle>Disclaimer</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            We created the <span className=\"highlight\">Maximise</span> revision\n            planner to give you a personalised revision plan that{\" \"}\n            <span className=\"highlight\">helps</span> to maximise your revision\n            efficiency. <span className=\"highlight\">However</span>, this tool\n            should be treated as an example of a{\" \"}\n            <span className=\"highlight\">possible</span> time schedule, rather\n            than a key to great marks - that only comes with{\" \"}\n            <span className=\"highlight\">time</span> and{\" \"}\n            <span className=\"highlight\">effort</span>. It is therefore{\" \"}\n            <span className=\"highlight\">not</span> intended to entirely decide\n            all of your revision timetabling, nor will it{\" \"}\n            <span className=\"highlight\">guarantee</span> achieving specific\n            grades for any exam. This tool is simply{\" \"}\n            <span className=\"highlight\">a source of time schedule</span> that{\" \"}\n            <span className=\"highlight\">may help to maximise</span> your\n            revision time.\n            <br />\n            <br />\n            In short, the <span className=\"highlight\">Maximise</span> revision\n            planner can help to make a great revision plan, but{\" \"}\n            <span className=\"highlight\">you</span> know your{\" \"}\n            <span className=\"highlight\">strengths</span> and{\" \"}\n            <span className=\"highlight\">weaknesses</span> best, so we ask that\n            you apply your <span className=\"highlight\">own</span> input to your\n            revision plan as well.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            onClick={() => setDisclaimerOpen(false)}\n            color=\"primary\"\n            autoFocus\n          >\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <Typography variant=\"h4\" gutterBottom>\n        Sign up to <span className=\"highlight\">Maximise</span>\n      </Typography>\n      <form onSubmit={login}>\n        {Object.keys(initialState)\n          .filter(x => x !== \"agreed\")\n          .map(field => (\n            <TextField\n              label={startCase(field)}\n              placeholder={\n                field === \"code\" ? \"Product code found on revision pack\" : \"\"\n              }\n              value={values[field]}\n              onChange={handleChange(field)}\n              margin=\"normal\"\n              variant=\"filled\"\n              helperText={helpers[field] ? helpers[field] + \" \" : \"\"}\n              error={helpers[field] !== \"\"}\n              key={field}\n              type={field.includes(\"assword\") ? \"password\" : \"text\"}\n              fullWidth\n              className={classes[field]}\n            />\n          ))}\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={agreed}\n              onChange={e => setAgreed(e.target.checked)}\n              value=\"agreed\"\n              color=\"primary\"\n            />\n          }\n          label={\n            <span>\n              I have read the{\" \"}\n              <ButtonLink\n                className={classes.link}\n                href=\"#\"\n                onClick={e => {\n                  e.preventDefault();\n                  setDisclaimerOpen(true);\n                }}\n              >\n                Disclaimer\n              </ButtonLink>\n            </span>\n          }\n        />\n        <div style={{ display: \"flex\", marginTop: 8, marginBottom: 16 }}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            type=\"submit\"\n            disabled={\n              stringify(initialState) !== stringify(helpers) ||\n              Object.values(values).filter(\n                x => values[x] === \"\"\n              ).length > 0 ||\n              !agreed\n            }\n          >\n              {console.log(Object.values(values).filter(\n                x => x === \"\"\n              ))}\n            Sign up\n          </Button>\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            style={{\n              marginLeft: \"auto\"\n            }}\n            onClick={clear}\n          >\n            Clear\n          </Button>\n        </div>\n        <Divider />\n        <Typography\n          variant=\"h5\"\n          gutterBottom\n          style={{\n            marginTop: 8\n          }}\n        >\n          Already have an account?\n        </Typography>\n        <Button\n          component={Link}\n          to=\"/login\"\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          Login Here\n        </Button>\n      </form>\n    </Paper>\n  );\n};"],"sourceRoot":""}